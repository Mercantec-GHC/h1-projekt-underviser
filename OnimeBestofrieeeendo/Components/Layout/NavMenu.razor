@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using Onime.Models
@using System.Data
@using Npgsql

<!-- Отдельные навигационные кнопки -->
<div class="nav-container">
    <button @onclick='() => SetActive("home")' 
            class="nav-button-base nav-button-standard nav-button-home @(CurrentSection == "home" ? "active" : "")">
        Home
        @if (CurrentSection == "home")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("products")' 
            class="nav-button-base nav-button-standard nav-button-shop @(CurrentSection == "products" ? "active" : "")">
        Shop
        @if (CurrentSection == "products")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("categories")' 
            class="nav-button-base nav-button-standard nav-button-zone @(CurrentSection == "categories" ? "active" : "")">
        T.Zone
        @if (CurrentSection == "categories")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("profile")' 
            class="nav-button-base nav-button-profile @(CurrentSection == "profile" ? "active" : "")">
        <img src="@AvatarPath" alt="Profile" class="profile-avatar-img" />
        @if (CurrentSection == "profile")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="profile-active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("contact")' 
            class="nav-button-base nav-button-standard nav-button-contact @(CurrentSection == "contact" ? "active" : "")">
        Contact
        @if (CurrentSection == "contact")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
</div>

@code {
    [Parameter]
    public string CurrentSection { get; set; } = "home";
    
    [Parameter]
    public EventCallback<string> OnSectionChanged { get; set; }
    
    private string AvatarPath { get; set; } = "/images/default-avatar.svg";
    private UserProfile? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAsync();
    }

    private async Task LoadCurrentUserAsync()
    {
        try
        {
            // Здесь загружаем профиль пользователя
            var profiles = await LoadProfilesAsync();
            if (profiles.Count > 0)
            {
                // Для демонстрации берем первый профиль из списка
                // В реальном приложении нужно использовать механизм аутентификации
                currentUser = profiles[0];
                
                // Устанавливаем аватар, если он есть
                if (!string.IsNullOrEmpty(currentUser.AvatarUrl))
                {
                    AvatarPath = currentUser.AvatarUrl;
                }
                else
                {
                    // Если аватара нет, используем изображение по умолчанию
                    AvatarPath = "/images/default-avatar.svg";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            // В случае ошибки используем изображение по умолчанию
            AvatarPath = "/images/default-avatar.svg";
        }
    }

    private async Task<List<UserProfile>> LoadProfilesAsync()
    {
        var profiles = new List<UserProfile>();
        
        try
        {
            // Используем реальную строку подключения к базе данных Neon
            var connectionString = "Host=ep-royal-sky-a237idgr-pooler.eu-central-1.aws.neon.tech;Username=neondb_owner;Password=npg_0lCxSkAVEUe9;Database=neondb;sslmode=require;";
            using var connection = new NpgsqlConnection(connectionString);
            await connection.OpenAsync();
            
            using var cmd = new NpgsqlCommand("SELECT * FROM users", connection);
            using var reader = await cmd.ExecuteReaderAsync();
            
            while (await reader.ReadAsync())
            {
                var profile = new UserProfile
                {
                    Id = reader.GetInt32(reader.GetOrdinal("id")),
                    Username = reader.GetString(reader.GetOrdinal("username")),
                    AvatarUrl = reader.IsDBNull(reader.GetOrdinal("avatar_url")) ? null : reader.GetString(reader.GetOrdinal("avatar_url"))
                };
                
                profiles.Add(profile);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Database error: {ex.Message}");
        }
        
        return profiles;
    }

    private async Task SetActive(string section)
    {
        CurrentSection = section;
        
        // Прокрутка к секции
        await JSRuntime.InvokeVoidAsync("scrollToSection", section);
        
        // Вызов события изменения секции
        await OnSectionChanged.InvokeAsync(section);
    }
}
