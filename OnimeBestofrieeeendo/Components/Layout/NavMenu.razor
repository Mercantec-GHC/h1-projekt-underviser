@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@inject UserProfileService UserProfileService

<!-- Отдельные навигационные кнопки -->
<div class="nav-container">
    <button @onclick='() => SetActive("home")' 
            class="nav-button-base nav-button-standard nav-button-home @(CurrentSection == "home" ? "active" : "")">
        Home
        @if (CurrentSection == "home")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("products")' 
            class="nav-button-base nav-button-standard nav-button-shop @(CurrentSection == "products" ? "active" : "")">
        Shop
        @if (CurrentSection == "products")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("categories")' 
            class="nav-button-base nav-button-standard nav-button-zone @(CurrentSection == "categories" ? "active" : "")">
        T.Zone
        @if (CurrentSection == "categories")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator" />
        }
    </button>
    
    <button @onclick='() => SetActive("profile")' 
            class="nav-button-base nav-button-profile @(CurrentSection == "profile" ? "active" : "")">
        <img src="@AvatarPath" alt="Profile" class="profile-avatar-img" />
        @if (CurrentSection == "profile")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="profile-active-indicator" />
        }
    </button>
    
    @if (CurrentSection == "home" || CurrentSection == "contact")
{
    <button @onclick='() => SetActive("contact")' 
            class="nav-button-base-contact nav-button-contact @(CurrentSection == "contact" ? "active" : "")">
        
        @if (CurrentSection == "contact")
        {
            <img src="/images/Emergency.gif" alt="Active" class="active-indicator-contact" />
        }
    </button>
}

@if (CurrentSection == "home")
{
    <button @onclick='() => SetActive("products")' 
            class="nav-button-base-shop nav-button-shop-home @(CurrentSection == "products" ? "active" : "")">
        
        @if (CurrentSection == "products")
        {
            <img src="/images/buttonisactive.gif" alt="Active" class="active-indicator-shop" />
        }
    </button>
}

    </div>

@code {
    [Parameter]
    public string CurrentSection { get; set; } = "home";
    
    [Parameter]
    public EventCallback<string> OnSectionChanged { get; set; }
    
    private string AvatarPath { get; set; } = "/images/default-avatar.svg";
    private UserProfile? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAsync();
    }

    private async Task LoadCurrentUserAsync()
    {
        try
        {
            // Загружаем профиль пользователя через сервис
            var profiles = await UserProfileService.LoadProfilesAsync();
            if (profiles.Count > 0)
            {
                _currentUser = profiles[0];
                AvatarPath = UserProfileService.GetAvatarUrl(_currentUser);
            }
            else
            {
                AvatarPath = "/images/default-avatar.svg";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            AvatarPath = "/images/default-avatar.svg";
        }
    }

    private async Task SetActive(string section)
    {
        CurrentSection = section;
        
        // Прокрутка к секции
        await JsRuntime.InvokeVoidAsync("scrollToSection", section);
        
        // Вызов события изменения секции
        await OnSectionChanged.InvokeAsync(section);
    }

}