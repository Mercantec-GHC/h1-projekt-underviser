@page "/"
@rendermode InteractiveServer

@* These inject services - like getting helpers from outside to do specific jobs *@
@inject ContactService ContactService
@inject UserProfileService UserProfileService  
@inject ShopService ShopService
@inject ShopBusinessService ShopBusinessService
@inject ErrorHandler ErrorHandler


@* ==================== HOMEPAGE SECTIONS ==================== *@

@* ===== TOP SECTION WITH LOGO ===== *@
@* This is where we show our cool logo and main message *@
<section id="home" class="section">
    <div class="container">
        <FloatingParticles />
        <div class="hero-description">
            <p class="lead">AnimeWorld: Be the hero.<br>Rule your world.</p>
        </div>
        <div class="hero-content">
            <h1 class="animated-logo">
                <img src="/images/logo.svg" alt="The Onime World"/>
            </h1>
            <h2 class="animated-logo2">
                <img src="/images/logo1.svg" alt="The Onime World"/>
            </h2>
            <h2 class="logo3">
                <img src="/images/japan.svg" alt="The Onime World"/>
            </h2>
        </div>
    </div>
</section>

<!-- ===== PRODUCTS SECTION ===== -->
<!-- Here are all the products and sorting panel -->
<section id="products" class="section">
    <div class="container-full">
        <!-- Sorting panel for products -->
        <FloatingParticles />
        <div class="products-wrapper">
            <div class="sorting-panel">
                <label for="sortSelect">Sort by:</label>
                <select id="sortSelect" @onchange="OnSortChanged">
                    <option value="None">No sorting</option>
                    <option value="PriceAsc">Price â†‘</option>
                    <option value="PriceDesc">Price â†“</option>
                    <option value="NameAsc">Name A â†’ Z</option>
                    <option value="NameDesc">Name Z â†’ A</option>
                    <option value="RarityAsc">Rarity â†‘</option>
                    <option value="RarityDesc">Rarity â†“</option>
                </select>
            </div>
            <div class="products-grid">
                @foreach (var product in _shopProducts)
                {
                    <div class="product-card">
                        <div class="product-image-wrapper">
                            <img src="@product.ImageUrl" alt="@product.Name"/>
                        </div>
                        <div class="product-info">
                            <h3 class="product-title">@product.Name</h3>
                            <span class="product-price">@product.Price DKK</span>
                            <div class="product-actions">
                                <button class="btn-add-cart" @onclick="() => BuyProduct(product)">KÃ¸be</button>
                                <button class="btn-read-more" @onclick="() => ShowProductDetails(product)">Beskrivelse</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<!-- ===== PRODUCT INFO POPUP ===== -->
<!-- Popup for more info about a product -->
@if (_selectedProduct != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-btn" @onclick="CloseModal">X</button>
            <h3>@_selectedProduct.Name</h3>
            <p>@_selectedProduct.Description</p>
            <p>How much is there: @_selectedProduct.Quantity</p>
        </div>
    </div>
}

<!-- ===== CATEGORIES SECTION ===== -->
<!-- Product categories like filters -->
<section id="categories" class="section">
    <div class="container">
        <h2>ÐšÐ°Ñ‚ÐµÐ³Ð¾Ñ€Ð¸Ð¸</h2>
        <div class="categories-grid">
            <div class="category-card">
                <h3>Nye varer</h3>
                <p>New Arrivals</p>
            </div>
            <div class="category-card">
                <h3>Popular</h3>
                <p>Your Choice</p>
            </div>
            <div class="category-card">
                <h3>Sale</h3>
                <p>Sale 50%</p>
            </div>
        </div>
    </div>
</section>

<!-- ===== PROFILE SECTION ===== -->
<!-- This is your profile info section -->
<section id="profile" class="section profile-section">
    <div class="container">
        <h2>Min Profil</h2>
        @if (_currentUserProfile != null)
        {
            <div class="profile-container">
                <div class="profile-avatar">
                    <img src="@GetAvatarUrl(_currentUserProfile)" alt="@_currentUserProfile.Username"/>
                    <div class="profile-level">
                        <span>LVL @_currentUserProfile.Level</span>
                    </div>
                </div>
                <div class="profile-info">
                    <div class="profile-username">
                        <h3>@_currentUserProfile.Username</h3>
                        <span class="profile-status">Online</span>
                    </div>
                    <div class="profile-stats">
                        <div class="stat-item">
                            <span class="stat-label">Rank:</span>
                            <span class="stat-value">@_currentUserProfile.Role</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Online:</span>
                            <span class="stat-value">@_currentUserProfile.JoinDate.ToShortDateString()</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Saldo:</span>
                            <span class="stat-value">@_currentUserProfile.Balance DKK</span>
                        </div>
                    </div>
                    <div class="profile-bio">
                        <p>@_currentUserProfile.Bio</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Yikes! No profile found. Try again maybe?</p>
        }
    </div>
</section>

<!-- ===== CONTACT & ABOUT SECTION ===== -->
<!-- Here is about us, contacts, FAQ, and contact form -->
<section id="contact" class="section contact-section">
    <div class="container">
        <div class="section-header">
            <h2 class="contact-title">Avoid us or risk it!</h2>
            <div class="header-line"></div>
        </div>
        
        
        
        
        
        <div class="contact-grid">
            <!-- About us column -->
            <div class="contact-column about-us-column">
                <div class="contact-card">
                    <h3 class="card-title">Our Stand</h3>
                    <div class="about-content">
                        <p>Onime isnâ€™t just fashion â€” itâ€™s a universe where style comes to life.</p>
                        <p>Only the best â€” handpicked from trusted suppliers and fused with our original designs to keep you looking unstoppable.</p>
                        <p class="highlight-text">Only cool clothes from trusted dudes.</p>
                    </div>
                    <div class="brand-values">
                        <div class="value-item">
                            <div class="value-icon">ðŸš€</div>
                            <p>Innovative style</p>
                        </div>
                        <div class="value-item">
                            <div class="value-icon">âš¡</div>
                            <p>Fast delivery</p>
                        </div>
                        <div class="value-item">
                            <div class="value-icon">ðŸ’¯</div>
                            <p>Premium quality</p>
                        </div>
                    </div>
                </div>
            </div>
            
            
            
            
            
            <!-- Contacts column -->
            <div class="contact-column contact-info-column">
                <div class="contact-card">
                    <h3 class="card-title">Avoid us or do it</h3>
                    <div class="contact-methods">
                        <a href="mailto:support@onime.com" class="contact-method">
                            <div class="method-icon">ðŸ“§</div>
                            <div class="method-details">
                                <span class="method-label">Email</span>
                                <span class="method-value">support@onime.com</span>
                            </div>
                        </a>
                        <a href="https://t.me/onimeshop" class="contact-method">
                            <div class="method-icon">ðŸ’¬</div>
                            <div class="method-details">
                                <span class="method-label">Telegram</span>
                                <span class="method-value">Onimeshop</span>
                            </div>
                        </a>
                        <a href="tel:+4571234567" class="contact-method">
                            <div class="method-icon">ðŸ“±</div>
                            <div class="method-details">
                                <span class="method-label">My Digit</span>
                                <span class="method-value">+45 7123 4567</span>
                            </div>
                        </a>
                    </div>
                    <div class="social-media">
                        <h4>Our Soul</h4>
                        <div class="social-icons">
                            <a href="https://instagram.com/onimeshop" class="social-icon">
                                <i class="fab fa-instagram"></i>
                            </a>
                            <a href="https://tiktok.com/onimeshop" class="social-icon">
                                <i class="fab fa-tiktok"></i>
                            </a>
                            <a href="https://facebook.com/onimeshop" class="social-icon">
                                <i class="fab fa-facebook"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            
            
            
            
            <!-- FAQ column -->
            <div class="contact-column faq-column">
                <div class="contact-card">
                    <h3 class="card-title">Brain Boost Zone</h3>
                    <div class="faq-container">
                        <!-- FAQ items using the new FaqItem component -->
                        <FaqItem Question="How long does delivery take?" 
                                 Answer="Delivery within Denmark takes 1-3 business days. International delivery - 7-14 days depending on the country. Sorry for the delay, this is because our top delivery man Satoru Gojo is not with us" />
                        
                        <FaqItem Question="Is it possible to return the product?" 
                                 Answer="Yes, within 14 days. The item must be in perfect condition with tags. But think about it, would Jotaro have returned Mother's soul if he had lost?!" />
                        
                        <FaqItem Question="How to determine your size?" 
                                 Answer="Measure yourself with a flexible tape and compare it with the size chart. If you're unsure, choose the larger size." />
                        
                        <FaqItem Question="Where are your products manufactured?" 
                                 Answer="We work with the best factories around the world, focusing on quality and ethical production. I may have sewn something..." />
                    </div>
                </div>
            </div>
            
            
            
            
            <!-- Contact form column -->
            <div class="contact-form-container">
                <div class="contact-card form-card">
                    <h3 class="card-title">Speak your mind. Weâ€™re listeningâ€¦ maybe.</h3>
                    <EditForm Model="_contactForm" OnValidSubmit="SubmitContactForm" class="contact-form">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="name">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="_contactForm.Name" placeholder="Enter your Stand..."/>
                            </div>
                            <div class="form-group">
                                <label for="email">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="_contactForm.Email" placeholder="Enter your email"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="subject">Subject</label>
                            <InputText id="subject" class="form-control" @bind-Value="_contactForm.Subject" placeholder="Subject?Do it."/>
                        </div>
                        <div class="form-group">
                            <label for="message">Message</label>
                            <textarea id="message" class="form-control" rows="4" placeholder="Enter your message" @bind="_contactForm.Message" autocapitalize="off" autocorrect="off" spellcheck="false" autocomplete="off"></textarea>
                        </div>
                        <button type="submit" class="btn-submit">Send</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    // ==================== C# CODE SECTION ====================
    // This is where all the logic happens - like a brain of the page!
    
    // ===== PROFILE STUFF =====  
    // Here we keep info about users and load their profiles
    private List<UserProfile> _profiles = new();
    private readonly int _currentUserId = 1; // just using 1 for now - like a demo user
    private UserProfile? _currentUserProfile;

    // Loads all page data (profile and products)
    private async Task LoadPageDataAsync()
    {
        await Task.WhenAll(
            LoadUserProfileAsync(),
            LoadProductsAsync()
        );
    }

    // Loads user profile from service
    private async Task LoadUserProfileAsync()
    {
        try
        {
            _profiles = await UserProfileService.LoadProfilesAsync();
            _currentUserProfile = _profiles.FirstOrDefault(p => p.Id == _currentUserId) 
                                  ?? CreateFallbackProfile();
        }
        catch (Exception ex)
        {
            await ErrorHandler.HandleDatabaseErrorAsync(ex, "Loading user profile");
            _currentUserProfile = CreateFallbackProfile();
        }
    }

    // Loads products from shop
    private async Task LoadProductsAsync()
    {
        try
        {
            _shopProducts = await ShopService.LoadProductsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandler.HandleServiceErrorAsync(ex, "Shop Service");
            _shopProducts = new List<ShopProductView>(); // Empty list as fallback
        }
    }

    // Makes a fake profile if something is broken
     private UserProfile CreateFallbackProfile()
    {
        return new UserProfile
        {
            Id = 1,
            Username = "Demo User",
            Email = "demo@example.com",
            JoinDate = DateTime.Now.AddDays(-30),
            Balance = 5000,
            Role = "Demo",
            AvatarUrl = "/images/default-avatar.jpg",
            Level = 50,
            Bio = "Demo profile - database connection not available"
        };
    }

    // Gets avatar or default pic
    private string GetAvatarUrl(UserProfile profile)
    {
        if (string.IsNullOrWhiteSpace(profile.AvatarUrl))
            return "/images/default-avatar.jpg";
        return UserProfileService.GetAvatarUrl(profile);
    }

    // ===== PRODUCTS STUFF =====
    // Here we keep info about products and how to buy/sort them
    private List<ShopProductView> _shopProducts = new();
    private ShopProductView? _selectedProduct;
    private ShopBusinessService.SortOption _currentSort = ShopBusinessService.SortOption.None;

    // Sorts products when user changes sort option
    private void OnSortChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<ShopBusinessService.SortOption>(e.Value?.ToString(), out var opt))
        {
            _currentSort = opt;
            ApplySorting();
        }
    }

    // Actually sorts the products
    private void ApplySorting()
    {
        _shopProducts = ShopBusinessService.SortProducts(_shopProducts, _currentSort);
    }

    // Shows popup with product info
    private void ShowProductDetails(ShopProductView product)
    {
        _selectedProduct = product;
    }

    // Closes the popup
    private void CloseModal()
    {
        _selectedProduct = null;
    }

    // Checks if user can buy the product
    private bool CanBuyProduct(ShopProductView product)
    {
        return _currentUserProfile != null && _currentUserProfile.Balance >= product.Price;
    }

    // Handles buying a product
    private async Task BuyProduct(ShopProductView product)
    {
        if (_currentUserProfile == null)
            return;

        if (!CanBuyProduct(product))
        {
            await ErrorHandler.ShowUserErrorAsync("Not enough money! Go sell your soul or start hustling, buddy!");
            return;
        }

        var success = await ShopService.BuyProductAsync(_currentUserProfile.Id, product);

        if (success)
        {
            await ErrorHandler.ShowSuccessAsync($"You bought: {product.Name}!");
            _shopProducts = await ShopService.LoadProductsAsync();
            _currentUserProfile.Balance -= product.Price;
            StateHasChanged();
        }
        else
        {
            await ErrorHandler.ShowUserErrorAsync("Something went wrong while buying the product. Please try again later.");
        }
    }

    // ===== CONTACT FORM STUFF =====
    // This is for the contact form and sending messages
    private ContactFormModel _contactForm = new ContactFormModel();

    // Sends the contact form
    private async Task SubmitContactForm()
    {
        try
        {
            await ContactService.SaveContactAsync(_contactForm);
            await ErrorHandler.ShowSuccessAsync("Your message has been sent. We will contact you soon!");
            ResetContactForm();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandler.HandleServiceErrorAsync(ex, "Contact Service");
        }
    }

    // Resets the contact form
    private void ResetContactForm()
    {
        _contactForm = new ContactFormModel();
    }

    // Loads everything when page starts
    protected override async Task OnInitializedAsync()
    {
        await LoadPageDataAsync();
    }
}