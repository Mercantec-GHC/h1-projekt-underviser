@page "/"
@using Npgsql
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration
@rendermode InteractiveServer

<!-- ==================== –ì–õ–ê–í–ù–ê–Ø –°–ï–ö–¶–ò–Ø ==================== -->
<!-- –≠—Ç–æ —Ç–∏–ø–∞ –æ–±–ª–æ–∂–∫–∞ —Å–∞–π—Ç–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è  -->
<section id="home" class="section">
    <div class="container">
        <div class="hero-content">
            <h1>The Onime World</h1>
            <p class="lead"></p> <!-- –°—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç, —Ç–∏–ø–∞ "–•–∞–π" -->
            <button class="btn btn-primary" @onclick="@(() => ScrollToSection("products"))">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à–º–æ—Ç–∫–∏</button>
            <!-- –ñ–º–∞–∫–∞–µ—à—å ‚Äî –∏ —Å—Ä–∞–∑—É –∫ —Ç–æ–≤–∞—Ä–∞–º –ª–µ—Ç–∏—à—å -->
        </div>
    </div>
</section>

<!-- ==================== –°–ï–ö–¶–ò–Ø –¢–û–í–ê–†–û–í ==================== -->

<section id="products" class="section">
    <div class="container-full">
        <div class="products-wrapper">
            <div class="products-grid">
                @foreach (var product in _shopProducts)
                {
                    <!-- –î–ª—è –∫–∞–∂–¥–æ–π —à–º–æ—Ç–∫–∏ —Å–≤–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞, –∫–∞–∫ –≤ –∏–Ω—Å—Ç–µ -->
                    <div class="product-card">
                        <div class="product-image">
                            <img src="@product.ImageUrl" alt="@product.Name" />
                        </div>
                        <div class="product-info">
                            <h3 class="product-title">@product.Name</h3>
                            <span class="product-price">@product.Price DKK</span>
                            <div class="product-actions">
                                <button class="btn-add-cart" @onclick="() => BuyProduct(product)">K√∏be</button>
                                <button class="btn-read-more" @onclick="() => ShowProductDetails(product)">Beskrivelse</button>
                                <!-- –ñ–º–∞–∫–∞–µ—à—å ‚Äî –∏ –≤—ã–ª–µ–∑–∞–µ—Ç –ø–æ–ø-–∞–ø —Å –∏–Ω—Ñ–æ–π -->
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<!-- ==================== –ü–û–ü-–ê–ü –° –ò–ù–§–û–ò==================== -->
<!-- –≠—Ç–æ —Ç–∏–ø–∞ –æ–∫–æ—à–∫–æ, –≥–¥–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã –ø—Ä–æ —à–º–æ—Ç–∫—É -->
@if (_selectedProduct != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <!-- –ö–ª–∏–∫–Ω—É–ª –Ω–∞ —Ñ–æ–Ω ‚Äî –æ–∫–æ—à–∫–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å -->
        <div class="modal-content" @onclick:stopPropagation>
            <!-- –ê –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–∫–∞–µ—à—å ‚Äî –∏ –æ–Ω–æ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç -->
            <button class="close-btn" @onclick="CloseModal">X</button>
            <h3>@_selectedProduct.Name</h3>
            <p>@_selectedProduct.Description</p>
            <p>–°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å: @_selectedProduct.Quantity</p>
        </div>
    </div>
}

<!-- ==================== –°–ï–ö–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ==================== -->
<!-- –¢—É—Ç —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã —à–º–æ—Ç–æ–∫, –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã -->
<section id="categories" class="section">
    <div class="container">
        <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <div class="categories-grid">
            <div class="category-card">
                <h3>Nye varer</h3>
                <p>New Arrivals</p>
            </div>
            <div class="category-card">
                <h3>Popular</h3>
                <p>Your Choice</p>
            </div>
            <div class="category-card">
                <h3>Sale</h3>
                <p>Sale 50%</p>
            </div>
        </div>
    </div>
</section>

<!-- ==================== –°–ï–ö–¶–ò–Ø –ü–†–û–§–ò–õ–Ø ==================== -->
<!-- –≠—Ç–æ —Ç–≤–æ—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞, –≥–¥–µ –≤—Å—è –∏–Ω—Ñ–∞ –ø—Ä–æ —Ç–µ–±—è -->
<section id="profile" class="section profile-section">
    <div class="container">
        <h2>Min Profil</h2>

        @if (_currentUserProfile != null)
        {
            <div class="profile-container">
                <div class="profile-avatar">
                    <!-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–≤–æ—é —Ñ–æ—Ç–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é, –µ—Å–ª–∏ —Ñ–æ—Ç–∫–∏ –Ω–µ—Ç -->
                    <img src="@GetAvatarUrl(_currentUserProfile)" alt="@_currentUserProfile.Username" />
                    <div class="profile-level">
                        <span>LVL @_currentUserProfile.Level</span>
                    </div>
                </div>
                <div class="profile-info">
                    <div class="profile-username">
                        <h3>@_currentUserProfile.Username</h3>
                        <span class="profile-status">Online</span>
                    </div>
                    <div class="profile-stats">
                        <div class="stat-item">
                            <span class="stat-label">Rank:</span>
                            <span class="stat-value">@_currentUserProfile.Role</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Online:</span>
                            <span class="stat-value">@_currentUserProfile.JoinDate.ToShortDateString()</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Saldo:</span>
                            <span class="stat-value">@_currentUserProfile.Balance DKK</span>
                        </div>
                    </div>
                    <div class="profile-bio">
                        <p>@_currentUserProfile.Bio</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—à—ë–ª, —Å–æ—Ä—è–Ω.</p>
        }
    </div>
</section>

<!-- ==================== –°–ï–ö–¶–ò–Ø –û –ù–ê–° ==================== -->
<!-- –¢—É—Ç –ø—Ä–æ –Ω–∞—Å, —Ç–∏–ø–∞ –∫—Ç–æ –º—ã —Ç–∞–∫–∏–µ -->
<section id="about" class="section">
    <div class="container">
        <h2>–û –Ω–∞—Å</h2>
        <div class="about-content">
            <p>Onime ‚Äî So, we are the best...or are there any questions?</p>
            <p>Only cool clothes from trusted dudes.</p>
        </div>
    </div>
</section>

@code {
    
    private async Task BuyProduct(ShopProductView product)
    {
        if (_currentUserProfile == null)
            return;

        if (_currentUserProfile.Balance < product.Price)
        {
            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Oops! Not enough money ü§∑‚Äç‚ôÇÔ∏è", "Go sell your soul or start hustling, buddy!");
            return;
        }

        try
        {
            var connString = Configuration.GetConnectionString("DefaultConnection");

            using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();

            using var transaction = await conn.BeginTransactionAsync();

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            using var cmdUpdateUser = new NpgsqlCommand(
                "UPDATE users SET balance = balance - @price WHERE id = @userId", conn, transaction);
            cmdUpdateUser.Parameters.AddWithValue("@price", product.Price);
            cmdUpdateUser.Parameters.AddWithValue("@userId", _currentUserProfile.Id);
            await cmdUpdateUser.ExecuteNonQueryAsync();

            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            using var cmdUpdateProduct = new NpgsqlCommand(
                "UPDATE shop_items SET quantity = quantity - 1 WHERE shop_item_id = @shopItemId", conn, transaction);
            cmdUpdateProduct.Parameters.AddWithValue("@shopItemId", product.ShopItemId);
            await cmdUpdateProduct.ExecuteNonQueryAsync();

            await transaction.CommitAsync();

            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ", $"–¢—ã –∫—É–ø–∏–ª: {product.Name}!");

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            _shopProducts = await LoadProductAsync();
            _currentUserProfile.Balance -= product.Price;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: " + ex.Message);
            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "–û—à–∏–±–∫–∞ üòµ", "–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
        }
    }
    // ==================== –ù–ê–®–ò –®–ú–û–¢–ö–ò –ò –î–ê–ù–ù–´–ï ====================
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–º–æ—Ç–æ–∫ –≤ –º–∞–≥–∞–∑–µ
    private List<ShopProductView> _shopProducts = new();
    // –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —é–∑–µ—Ä–æ–≤
    private List<UserProfile> _profiles = new();
    // –ê–π–¥–∏—à–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ 1
    private int _currentUserId = 1;
    // –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ, –∫—Ç–æ —Å–µ–π—á–∞—Å —Å–º–æ—Ç—Ä–∏—Ç
    private UserProfile? _currentUserProfile;
    // –®–º–æ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø–æ–ø-–∞–ø–∞
    private ShopProductView? _selectedProduct;

    // ==================== –§–£–ù–ö–¶–ò–ò ====================
    // –°–∫—Ä–æ–ª–ª–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ –Ω—É–∂–Ω–æ–º—É –º–µ—Å—Ç—É
    private async Task ScrollToSection(string sectionId)
    {
        // –î–µ–ª–∞–µ–º –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª —á–µ—Ä–µ–∑ JavaScript, –ø–æ—Ç–æ–º—É —á—Ç–æ Blazor —Å–∞–º –Ω–µ —É–º–µ–µ—Ç
        await JsRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    // –ì—Ä—É–∑–∏–º –≤—Å—ë, –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // –¢–∞—â–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –±–∞–∑—ã
            _profiles = await LoadProfilesAsync();
            // –ò—â–µ–º –Ω–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∞–π–¥–∏
            _currentUserProfile = _profiles.FirstOrDefault(p => p.Id == _currentUserId);

            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –¥–µ–ª–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π
            if (_currentUserProfile == null)
            {
                _currentUserProfile = new UserProfile
                {
                    Id = 15,
                    Username = "–î–µ–º–æ –ß–µ–ª",
                    Email = "demo@example.com",
                    JoinDate = DateTime.Now.AddDays(-100),
                    Balance = 10000,
                    Role = "–î–µ–º–æ",
                    AvatarUrl = "/images/default-avatar.jpg",
                    Level = 100,
                    Bio = "–≠—Ç–æ –¥–µ–º–∫–∞, –±–∞–∑–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞"
                };
            }
        }
        catch (Exception ex)
        {
            // –ï—Å–ª–∏ –±–∞–∑–∞ —É–ø–∞–ª–∞, –ø–∏—à–µ–º –æ—à–∏–±–∫—É –∏ –¥–µ–ª–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            Console.WriteLine($"–ß—ë-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å: {ex.Message}");
            _currentUserProfile = new UserProfile
            {
                Id = 1,
                Username = "–û—à–∏–±–∫–∞ –ß–µ–ª",
                Email = "error@example.com",
                JoinDate = DateTime.Now,
                Balance = 999,
                Role = "–û—à–∏–±–∫–∞",
                AvatarUrl = "/images/default-avatar.jpg",
                Level = 1,
                Bio = $"–ß—ë-—Ç–æ –Ω–µ –≥—Ä—É–∑–∏—Ç—Å—è: {ex.Message}"
            };
        }
        // –ì—Ä—É–∑–∏–º —à–º–æ—Ç–∫–∏
        _shopProducts = await LoadProductAsync();
    }

    // –ü–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ–¥–∏—Ç –≤ –±–∞–∑—É –∑–∞ –¥–∞–Ω–Ω—ã–º–∏
    private async Task<List<T>> ExecuteQueryAsync<T>(string sql, Func<NpgsqlDataReader, T> mapFunction)
    {
        // –°–ø–∏—Å–æ–∫, –∫—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —à–º–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏
        var resultList = new List<T>();
        // –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
        var connString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            // –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π
            using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();
            // –ö–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            using var cmd = new NpgsqlCommand(sql, conn);
            // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            using var reader = await cmd.ExecuteReaderAsync();
            // –ö–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —à—Ç—É–∫—É
            while (await reader.ReadAsync())
            {
                resultList.Add(mapFunction(reader));
            }
        }
        catch (Exception ex)
        {
            // –ï—Å–ª–∏ –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –ø–∏—à–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            Console.WriteLine($"–ë–∞–∑–∞ –æ—Ç–≤–∞–ª–∏–ª–∞—Å—å: {ex.Message}");
        }
        return resultList;
    }

    // –¢–∞—â–∏–º —à–º–æ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã
    private async Task<List<ShopProductView>> LoadProductAsync()
    {
        // –ó–∞–ø—Ä–æ—Å, —á—Ç–æ–± –¥–æ—Å—Ç–∞—Ç—å –≤—Å–µ —à–º–æ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
        string sql = @"
            SELECT shop_items.shop_item_id,
                   shop_items.item_id,
                   products.name,
                   products.image_url,
                   products.description,
                   shop_items.price,
                   shop_items.quantity
            FROM shop_items
            JOIN products ON shop_items.item_id = products.id
            WHERE shop_items.available = true";

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞, —á—Ç–æ–± –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —à–º–æ—Ç–∫–∏
        return await ExecuteQueryAsync(sql, reader => new ShopProductView
        {
            ShopItemId = reader.GetInt32(0),
            ItemId = reader.GetInt32(1),
            Name = reader.GetString(2),
            ImageUrl = reader.GetString(3),
            Description = reader.GetString(4),
            Price = reader.GetDecimal(5),
            Quantity = reader.GetInt32(6)
        });
    }

    // –¢–∞—â–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –±–∞–∑—ã
    private async Task<List<UserProfile>> LoadProfilesAsync()
    {
        // –ó–∞–ø—Ä–æ—Å, —á—Ç–æ–± –≤–∑—è—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
        string sql = @"
            SELECT u.id, u.username, u.email, u.join_date, u.balance, u.role,
                   p.avatar_url, p.level, p.bio
            FROM users u
            JOIN profiles p ON u.id = p.user_id";

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞, —á—Ç–æ–± —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
        return await ExecuteQueryAsync(sql, reader => new UserProfile
        {
            Id = reader.GetInt32(0),
            Username = reader.GetString(1),
            Email = reader.GetString(2),
            JoinDate = reader.GetDateTime(3),
            Balance = reader.GetDecimal(4),
            Role = reader.GetString(5),
            AvatarUrl = reader.IsDBNull(6) ? null : reader.GetString(6),
            Level = reader.GetInt32(7),
            Bio = reader.IsDBNull(8) ? null : reader.GetString(8)
        });
    }

    // –†–µ—à–∞–µ–º, –∫–∞–∫—É—é —Ñ–æ—Ç–∫—É –ø–æ–∫–∞–∑–∞—Ç—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    private string GetAvatarUrl(UserProfile profile)
    {
        // –ï—Å–ª–∏ —Ñ–æ—Ç–∫–∏ –Ω–µ—Ç, –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        if (string.IsNullOrEmpty(profile.AvatarUrl))
        {
            return "/images/default-avatar.jpg";
        }

        // –î–µ–ª–∞–µ–º –ø—É—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
        var avatarPath = profile.AvatarUrl.StartsWith("/") ? profile.AvatarUrl : "/" + profile.AvatarUrl;
        var fullPath = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot", avatarPath.TrimStart('/'));

        // –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        return System.IO.File.Exists(fullPath) ? avatarPath : "/images/default-avatar.jpg";
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø —Å –∏–Ω—Ñ–æ–π –ø—Ä–æ —à–º–æ—Ç–∫—É
    private void ShowProductDetails(ShopProductView product)
    {
        _selectedProduct = product;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
    private void CloseModal()
    {
        _selectedProduct = null;
    }

    // ==================== –ö–õ–ê–°–°–´ –î–õ–Ø –î–ê–ù–ù–´–• ====================
    // –ü—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞
    public class UserProfile
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime JoinDate { get; set; }
        public decimal Balance { get; set; }
        public string Role { get; set; } = "";
        public string? AvatarUrl { get; set; }
        public int Level { get; set; }
        public string? Bio { get; set; }
    }

    // –®–º–æ—Ç–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∞
    public class ShopProductView
    {
        public int ShopItemId { get; set; }
        public int ItemId { get; set; }
        public string Name { get; set; } = "";
        public string ImageUrl { get; set; } = "";
        public string Description { get; set; } = "";
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}