@page "/" 
@using Microsoft.JSInterop 
@using Onime.Models 
@inject IJSRuntime JSRuntime 
@rendermode InteractiveServer 
@using Npgsql
@inject IConfiguration Configuration

<!-- Главная секция -->
<section id="home" class="section">
    <div class="container">
        <div class="hero-content">
            <h1>The Onime World</h1> <!-- просто заголовок -->
            <p class="lead"></p> <!-- пока без текста -->
            <button class="btn btn-primary" @onclick="@(() => ScrollToSection("products"))">Посмотреть товары</button> <!-- кнопка скроллит вниз -->
        </div>
    </div>
</section>




<!-- Секция товаров -->
<section id="products" class="section">
    <div class="container-full">
        <div class="products-wrapper"> <!-- добавлено -->
            <div class="products-grid">
                @foreach (var product in shopProducts)
                {
                    <div class="product-card">
                        <div class="product-image">
                            <img src="@product.ImageUrl" alt="@product.Name" />
                        </div>
                        <div class="product-info">
                            <h3 class="product-title">@product.Name</h3>
                            <span class="product-price">@product.Price DKK</span>
                            <div class="product-actions">
                                <button class="btn-add-cart">Add to Cart</button>
                                <button class="btn-read-more" @onclick="() => ShowProductDetails(product)">Read More</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>


@if (selectedProduct != null)
{
    <div class="modal-overlay" @onclick="CloseModal"> <!-- Полупрозрачный фон -->
        <div class="modal-content" @onclick:stopPropagation> <!-- Окно, клики по нему не закрывают -->
            <button class="close-btn" @onclick="CloseModal">X</button> <!-- Кнопка закрытия -->
            <h3>@selectedProduct.Name</h3>
            <p>@selectedProduct.Description</p>
            <p>Quantity: @selectedProduct.Quantity</p>
        </div>
    </div>
}





<!-- Секция категорий -->
@* <section id="categories" class="section"> *@
@*     <div class="container"> *@
@*         <T_zone /> *@
@*     </div> *@
@* </section> *@








<!-- Секция профиля пользователя -->
<section id="profile" class="section profile-section">
    <div class="container">
        <h2>My Profile</h2> <!-- заголовок -->

        @if (currentUserProfile != null)
        {
            <div class="profile-container">
                <div class="profile-avatar">
                    
                    @{
                        // Проверяем, начинается ли путь с / (корневой путь)
                        var avatarSrc = !string.IsNullOrEmpty(currentUserProfile.AvatarUrl) 
                            ? (currentUserProfile.AvatarUrl.StartsWith("/") 
                                ? currentUserProfile.AvatarUrl 
                                : "/" + currentUserProfile.AvatarUrl)
                            : "/images/default-avatar.jpg";
                            
                        // Проверяем существование файла
                        var fullPath = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot", 
                            avatarSrc.TrimStart('/'));
                        var fileExists = System.IO.File.Exists(fullPath);
                        
                        // Если файл не существует, используем дефолтный аватар
                        if (!fileExists) {
                            avatarSrc = "/images/default-avatar.jpg";
                        }
                    } 
                    
                    <img src="@avatarSrc" alt="@currentUserProfile.Username" />

                    <div class="profile-level">
                        <span>LVL @currentUserProfile.Level</span>
                    </div>
                </div>
                <div class="profile-info">
                    <div class="profile-username">
                        <h3>@currentUserProfile.Username</h3>
                        <span class="profile-status">Online</span>
                    </div>
                    <div class="profile-stats">
                        <div class="stat-item">
                            <span class="stat-label">Rank:</span>
                            <span class="stat-value">@currentUserProfile.Role</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Joined:</span>
                            <span class="stat-value">@currentUserProfile.JoinDate.ToShortDateString()</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Balance:</span>
                            <span class="stat-value">@currentUserProfile.Balance DKK</span>
                        </div>
                    </div>
                    <div class="profile-bio">
                        <p>@currentUserProfile.Bio</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Profile not found.</p>
        }

        <!-- Остальной код с инвентарем и достижениями если нужно -->
        
    </div>
</section>






<!-- Секция о нас -->
<section id="about" class="section">
    <div class="container">
        <h2>About Us</h2>
        <div class="about-content">
            <p>Onime - the best are with us</p>
            <p>We offer only high-quality products from trusted manufacturers.</p>
        </div>
    </div>
</section>

@code {
    private async Task ScrollToSection(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId); // вызываю функцию из js
    }

    // демо товары из бд
    private List<ShopProductView> shopProducts = new();
    
    private List<UserProfile> profiles = new();
    private int CurrentUserId = 1; // Текущий пользователь — первый из списка

    private UserProfile? currentUserProfile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profiles = await LoadProfilesAsync();
            currentUserProfile = profiles.FirstOrDefault(p => p.Id == CurrentUserId);
            
            // Если профиль не загрузился, создаем временный демо-профиль
            if (currentUserProfile == null)
            {
                currentUserProfile = new UserProfile
                {
                    Id = 1,
                    Username = "Demo User",
                    Email = "demo@example.com",
                    JoinDate = DateTime.Now.AddDays(-100),
                    Balance = 1000,
                    Role = "Demo",
                    AvatarUrl = "/images/default-avatar.jpg",
                    Level = 10,
                    Bio = "This is a demo profile because database connection failed"
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            // Создаем временный демо-профиль при ошибке
            currentUserProfile = new UserProfile
            {
                Id = 1,
                Username = "Error Demo User",
                Email = "error@example.com",
                JoinDate = DateTime.Now,
                Balance = 999,
                Role = "Error",
                AvatarUrl = "/images/default-avatar.jpg",
                Level = 1,
                Bio = $"Error loading profile: {ex.Message}"
            };
        }
        shopProducts = await LoadProductAsync();
    }
    
    
    private async Task<List<ShopProductView>> LoadProductAsync()
    {
        var List = new List<ShopProductView>();
        var connString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();

            string sql = @"
            SELECT shop_items.shop_item_id,
           shop_items.item_id,
           products.name,
           products.image_url,
           products.description, 
           shop_items.price,
           shop_items.quantity
            FROM shop_items
            JOIN products ON shop_items.item_id = products.id
            WHERE shop_items.available = true";
            
            using var cmd = new NpgsqlCommand(sql, conn);
            using var reader = await cmd.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                List.Add(new ShopProductView
                {
                    ShopItemId = reader.GetInt32(0),
                    ItemId = reader.GetInt32(1),
                    Name = reader.GetString(2),
                    ImageUrl = reader.GetString(3),
                    Description = reader.GetString(4),
                    Price = reader.GetDecimal(5),
                    Quantity = reader.GetInt32(6)
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadProductAsync: {ex.Message}");
        }

        return List;
    }
  
    
    
    private async Task<List<UserProfile>> LoadProfilesAsync()
    {
        var list = new List<UserProfile>();
        var connString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();

            string sql = @"
                SELECT u.id, u.username, u.email, u.join_date, u.balance, u.role,
                       p.avatar_url, p.level, p.bio
                FROM users u
                JOIN profiles p ON u.id = p.user_id
            ";

            using var cmd = new NpgsqlCommand(sql, conn);
            using var reader = await cmd.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                list.Add(new UserProfile
                {
                    Id = reader.GetInt32(0),
                    Username = reader.GetString(1),
                    Email = reader.GetString(2),
                    JoinDate = reader.GetDateTime(3),
                    Balance = reader.GetInt32(4),
                    Role = reader.GetString(5),
                    AvatarUrl = reader.IsDBNull(6) ? null : reader.GetString(6),
                    Level = reader.GetInt32(7),
                    Bio = reader.IsDBNull(8) ? null : reader.GetString(8)
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profiles: {ex.Message}");
        }

        return list;
    }

    public class UserProfile
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime JoinDate { get; set; }
        public int Balance { get; set; }
        public string Role { get; set; } = "";
        public string? AvatarUrl { get; set; }
        public int Level { get; set; }
        public string? Bio { get; set; }
    }
    
    private ShopProductView? selectedProduct = null;

    private void ShowProductDetails(ShopProductView product)
    {
        selectedProduct = product;
    }

    private void CloseModal()
    {
        selectedProduct = null;
    }
}