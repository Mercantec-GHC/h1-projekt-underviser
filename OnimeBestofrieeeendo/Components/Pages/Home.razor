@page "/"
@using Npgsql
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations;
@using OnimeBestofrieeeendo.Components.Shared
@inject ContactService ContactService


<!-- ==================== ГЛАВНАЯ СЕКЦИЯ ==================== -->

<section id="home" class="section">
    <div class="container">
        
        <FloatingParticles />
        
        <div class="hero-description">
            <p class="lead">AnimeWorld: Be the hero.<br>
                Rule your world.</p>
        </div>
        
        <div class="hero-content">
            
            <h1 class="animated-logo">
                <img src="/images/logo.svg" alt="The Onime World"/>
            </h1>

            <h2 class="animated-logo2">
                <img src="/images/logo1.svg" alt="The Onime World"/>
            </h2>
            
            <h2 class="logo3">
                <img src="/images/japan.svg" alt="The Onime World"/>
                </h2>
        </div>
        
    </div>
</section>

<!-- ==================== СЕКЦИЯ ТОВАРОВ ==================== -->

<section id="products" class="section">
    
    <div class="container-full">
        <!-- Панель сортировки -->
<!-- добавил кандзи и все ониме -->
        <FloatingParticles />  
      
        <div class="products-wrapper">
            <div class="sorting-panel">
                <label for="sortSelect">Sort by:</label>
                <select id="sortSelect" @onchange="OnSortChanged">
                    <option value="None">No sorting</option>
                    <option value="PriceAsc">Price ↑</option>
                    <option value="PriceDesc">Price ↓</option>
                    <option value="NameAsc">Name A → Z</option>
                    <option value="NameDesc">Name Z → A</option>
                    <option value="RarityAsc">Rarity ↑</option>
                    <option value="RarityDesc">Rarity ↓</option>
                </select>
            </div>
            
            <div class="products-grid">
                @foreach (var product in _shopProducts)
                {
                    <div class="product-card">
                        <div class="product-image-wrapper">
                            <img src="@product.ImageUrl" alt="@product.Name"/>
                        </div>
                        <div class="product-info">
                            <h3 class="product-title">@product.Name</h3>
                            <span class="product-price">@product.Price DKK</span>
                            <div class="product-actions">
                                <button class="btn-add-cart" @onclick="() => BuyProduct(product)">Købe</button>
                                <button class="btn-read-more" @onclick="() => ShowProductDetails(product)">Beskrivelse</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>


<!-- ==================== ПОП-АП С ИНФОИ==================== -->
<!-- Это типа окошко, где больше инфы про шмотку -->
@if (_selectedProduct != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <!-- Кликнул на фон — окошко закрылось -->
        <div class="modal-content" @onclick:stopPropagation>
            <!-- А внутри кликаешь — и оно не исчезает -->
            <button class="close-btn" @onclick="CloseModal">X</button>
            <h3>@_selectedProduct.Name</h3>
            <p>@_selectedProduct.Description</p>
            <p>How much is there: @_selectedProduct.Quantity</p>
        </div>
    </div>
}

<!-- ==================== СЕКЦИЯ КАТЕГОРИЙ ==================== -->
<!-- Тут типа группы шмоток, как фильтры -->
<section id="categories" class="section">
    <div class="container">
        <h2>Категории</h2>
        <div class="categories-grid">
            <div class="category-card">
                <h3>Nye varer</h3>
                <p>New Arrivals</p>
            </div>
            <div class="category-card">
                <h3>Popular</h3>
                <p>Your Choice</p>
            </div>
            <div class="category-card">
                <h3>Sale</h3>
                <p>Sale 50%</p>
            </div>
        </div>
    </div>
</section>

<!-- ==================== СЕКЦИЯ ПРОФИЛЯ ==================== -->
<!-- Это твоя страничка, где вся инфа про тебя -->
<section id="profile" class="section profile-section">
    
    <div class="container">
        <h2>Min Profil</h2>

        @if (_currentUserProfile != null)
        {
            <div class="profile-container">
                <div class="profile-avatar">
                    <!-- Показываем твою фотку или дефолтную, если фотки нет -->
                    <img src="@GetAvatarUrl(_currentUserProfile)" alt="@_currentUserProfile.Username"/>
                    <div class="profile-level">
                        <span>LVL @_currentUserProfile.Level</span>
                    </div>
                </div>
                <div class="profile-info">
                    <div class="profile-username">
                        <h3>@_currentUserProfile.Username</h3>
                        <span class="profile-status">Online</span>
                    </div>
                    <div class="profile-stats">
                        <div class="stat-item">
                            <span class="stat-label">Rank:</span>
                            <span class="stat-value">@_currentUserProfile.Role</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Online:</span>
                            <span class="stat-value">@_currentUserProfile.JoinDate.ToShortDateString()</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Saldo:</span>
                            <span class="stat-value">@_currentUserProfile.Balance DKK</span>
                        </div>
                    </div>
                    <div class="profile-bio">
                        <p>@_currentUserProfile.Bio</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Yikes! No profile found. Try again maybe?</p>
        }
    </div>
</section>


<!-- ==================== СЕКЦИЯ КОНТАКТЫ И О НАС ==================== -->

<section id="contact" class="section contact-section">
    <div class="container">
        <div class="section-header">
            <h2 class="contact-title">Avoid us or risk it!</h2>
            <div class="header-line"></div>
        </div>
        
        <div class="contact-grid">
            <!-- Колонка О нас -->
            <div class="contact-column about-us-column">
                <div class="contact-card">
                    <h3 class="card-title">Our Stand</h3>
                    <div class="about-content">
                        <p>Onime isn’t just fashion — it’s a universe where style comes to life.</p>
                        <p>Only the best — handpicked from trusted suppliers and fused with our original designs to keep you looking unstoppable.</p>
                        <p class="highlight-text">Only cool clothes from trusted dudes.</p>
                    </div>
                    <div class="brand-values">
                        <div class="value-item">
                            <div class="value-icon">🚀</div>
                            <p>Innovative style</p>
                        </div>
                        <div class="value-item">
                            <div class="value-icon">⚡</div>
                            <p>Fast delivery</p>
                        </div>
                        <div class="value-item">
                            <div class="value-icon">💯</div>
                            <p>Premium quality</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Колонка Контакты -->
            <div class="contact-column contact-info-column">
                <div class="contact-card">
                    <h3 class="card-title">Avoid us or do it</h3>
                    <div class="contact-methods">
                        <a href="mailto:support@onime.com" class="contact-method">
                            <div class="method-icon">📧</div>
                            <div class="method-details">
                                <span class="method-label">Email</span>
                                <span class="method-value">support@onime.com</span>
                            </div>
                        </a>
                        <a href="https://t.me/onimeshop" class="contact-method">
                            <div class="method-icon">💬</div>
                            <div class="method-details">
                                <span class="method-label">Telegram</span>
                                <span class="method-value">Onimeshop</span>
                            </div>
                        </a>
                        <a href="tel:+4571234567" class="contact-method">
                            <div class="method-icon">📱</div>
                            <div class="method-details">
                                <span class="method-label">My Digit</span>
                                <span class="method-value">+45 7123 4567</span>
                            </div>
                        </a>
                    </div>
                    
                    <div class="social-media">
                        <h4>Our Soul</h4>
                        <div class="social-icons">
                            <a href="https://instagram.com/onimeshop" class="social-icon">
                                <i class="fab fa-instagram"></i>
                            </a>
                            <a href="https://tiktok.com/onimeshop" class="social-icon">
                                <i class="fab fa-tiktok"></i>
                            </a>
                            <a href="https://facebook.com/onimeshop" class="social-icon">
                                <i class="fab fa-facebook"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Колонка FAQ -->
            <div class="contact-column faq-column">
                <div class="contact-card">
                    <h3 class="card-title">Brain Boost Zone</h3>
                    <div class="faq-container">
                        <div class="faq-item">
                            <button class="faq-question" @onclick="() => ToggleFaq(0)">
                                How long does delivery take?
                                <span class="faq-icon">@(_expandedFaqIndex == 0 ? "−" : "+")</span>
                            </button>
                            <div class="faq-answer @(_expandedFaqIndex == 0 ? "expanded" : "")">
                                Delivery within Denmark takes 1-3 business days. International delivery - 7-14 days depending on the country.
                                Sorry for the delay, this is because our top delivery man Satoru Gojo is not with us
                            </div>
                        </div>
                        <div class="faq-item">
                            <button class="faq-question" @onclick="() => ToggleFaq(1)">
                                Is it possible to return the product?
                                <span class="faq-icon">@(_expandedFaqIndex == 1 ? "−" : "+")</span>
                            </button>
                            <div class="faq-answer @(_expandedFaqIndex == 1 ? "expanded" : "")">
                                Yes, within 14 days. The item must be in perfect condition with tags. But think about it, would Jotaro have returned Mother's soul if he had lost?!
                            </div>
                        </div>
                        <div class="faq-item">
                            <button class="faq-question" @onclick="() => ToggleFaq(2)">
                                How to determine your size?
                                <span class="faq-icon">@(_expandedFaqIndex == 2 ? "−" : "+")</span>
                            </button>
                            <div class="faq-answer @(_expandedFaqIndex == 2 ? "expanded" : "")">
                                Measure yourself with a flexible tape and compare it with the size chart. If you’re unsure, choose the larger size.
                            </div>
                        </div>
                        <div class="faq-item">
                            <button class="faq-question" @onclick="() => ToggleFaq(3)">
                                Where are your products manufactured?
                                <span class="faq-icon">@(_expandedFaqIndex == 3 ? "−" : "+")</span>
                            </button>
                            <div class="faq-answer @(_expandedFaqIndex == 3 ? "expanded" : "")">
                                We work with the best factories around the world, focusing on quality and ethical production. I may have sewn something...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Форма обратной связи -->
            <div class="contact-form-container">
                <div class="contact-card form-card">
                    <h3 class="card-title">Speak your mind. We’re listening… maybe.</h3>
                    <EditForm Model="_contactForm" OnValidSubmit="SubmitContactForm" class="contact-form">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="name">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="_contactForm.Name" placeholder="Enter your Stand..."/>
                            </div>
                            <div class="form-group">
                                <label for="email">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="_contactForm.Email" placeholder="Enter your email"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="subject">Subject</label>
                            <InputText id="subject" class="form-control" @bind-Value="_contactForm.Subject" placeholder="Subject?Do it."/>
                        </div>
                        <div class="form-group">
                            <label for="message">Message</label>
                            <textarea id="message" class="form-control" rows="4" placeholder="Enter your message" @bind="_contactForm.Message" autocapitalize="off" autocorrect="off" spellcheck="false" autocomplete="off"></textarea>
                        </div>
                        <button type="submit" class="btn-submit">Send</button>
                    </EditForm>
                </div>
            </div>
            
        </div>
        
    </div>
</section>


@code {
    private int _expandedFaqIndex = -1;
    
    private ContactFormModel _contactForm = new ContactFormModel();
    
    private void ToggleFaq(int index)
    {
        _expandedFaqIndex = (_expandedFaqIndex == index) ? -1 : index;
    }
    
    private async Task SubmitContactForm()
    {
        try
        {
            await ContactService.SaveContactAsync(_contactForm);

            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Thank you!", "Your message has been sent. We will contact you soon, but remember — my STAND is \"The World\".");

            _contactForm = new ContactFormModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Error", "Something went wrong. Please try again later.");
            Console.WriteLine(ex.Message);
        }
    }
    
    public class ContactFormModel
    {
        [Required(ErrorMessage = "Haha, are you ashamed to enter your name? Come on, show me your stand!")]
        public string Name { get; set; } = "";
        
        [Required(ErrorMessage = "Email! Give me your email!!!")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "Subject is required, bro!")]
        public string Subject { get; set; } = "";
        
        [Required(ErrorMessage = "Is that all you can do? Just say what you really want — write your own text already!")]
        public string Message { get; set; } = "";
    }

    private async Task BuyProduct(ShopProductView product)
    {
        if (_currentUserProfile == null)
            return;

        if (_currentUserProfile.Balance < product.Price)
        {
            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Oops! Not enough money 🤷‍♂️", "Go sell your soul or start hustling, buddy!");
            return;
        }

        try
        {
            // ИСПОЛЬЗУЕМ НОВЫЕ УНИВЕРСАЛЬНЫЕ МЕТОДЫ:
        
            // Обновляем баланс пользователя
            var userUpdateResult = await ExecuteNonQueryAsync(
                "UPDATE users SET balance = balance - @price WHERE id = @userId",
                ("@price", product.Price),
                ("@userId", _currentUserProfile.Id)
            );

            // Обновляем количество товара
            var productUpdateResult = await ExecuteNonQueryAsync(
                "UPDATE shop_items SET quantity = quantity - 1 WHERE shop_item_id = @shopItemId",
                ("@shopItemId", product.ShopItemId)
            );

            // Проверяем что обновления прошли успешно
            if (userUpdateResult > 0 && productUpdateResult > 0)
            {
                await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Поздравляем 🎉", $"Ты купил: {product.Name}!");

                // Обновляем UI
                _shopProducts = await LoadProductAsync();
                _currentUserProfile.Balance -= product.Price;
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Ошибка 😵", "Не удалось обновить данные.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при покупке: " + ex.Message);
            await JsRuntime.InvokeVoidAsync("showFunnyPopup", "Ошибка 😵", "Покупка не удалась. Попробуй ещё раз.");
        }
    }
    
    
    // ==================== НАШИ ШМОТКИ И ДАННЫЕ ====================
    // Список всех шмоток в магазе
    private List<ShopProductView> _shopProducts = new();
    // Все профили юзеров
    private List<UserProfile> _profiles = new();
    // Айдишка текущего юзера, пока просто 1
    private readonly int _currentUserId = 1;
    // Профиль того, кто сейчас смотрит
    private UserProfile? _currentUserProfile;
    // Шмотка, которую выбрали для поп-апа
    private ShopProductView? _selectedProduct;

    // ==================== ФУНКЦИИ ====================

    // Грузим всё, когда страница запускается
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Тащим профили из базы
            _profiles = await LoadProfilesAsync();
            // Ищем наш профиль по айди
            
            // Если профиля нет, делаем фейковый
            _currentUserProfile = _profiles.FirstOrDefault(p => p.Id == _currentUserId) ?? new UserProfile
            {
                Id = 15,
                Username = "Демо Чел",
                Email = "demo@example.com",
                JoinDate = DateTime.Now.AddDays(-100),
                Balance = 10000,
                Role = "DEMO",
                AvatarUrl = "/images/default-avatar.jpg",
                Level = 100,
                Bio = "DEMO - ALLARM - DB IS NOR WORKING, PLEASE CONTACT ADMINISTRATOR"
            };
        }
        catch (Exception ex)
        {
            // Если база упала, пишем ошибку и делаем фейковый профиль
            Console.WriteLine($"Чё-то сломалось: {ex.Message}");
            _currentUserProfile = new UserProfile
            {
                Id = 1,
                Username = "Ошибка Чел",
                Email = "error@example.com",
                JoinDate = DateTime.Now,
                Balance = 999,
                Role = "Ошибка",
                AvatarUrl = "/images/default-avatar.jpg",
                Level = 1,
                Bio = $"Чё-то не грузится: {ex.Message}"
            };
        }
        // Грузим шмотки
        _shopProducts = await LoadProductAsync();
    }

    // Помощник, который ходит в базу за данными
    
    
// Универсальный метод для SELECT запросов с параметрами
    private async Task<List<T>> ExecuteQueryAsync<T>(string sql, Func<NpgsqlDataReader, T> mapFunction, params (string Name, object Value)[]? parameters)
    {
        var resultList = new List<T>();
        var connString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            await using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();
            await using var cmd = new NpgsqlCommand(sql, conn);
        
            // Добавляем параметры если они есть
            if (parameters != null)
            {
                foreach (var (name, value) in parameters)
                {
                    cmd.Parameters.AddWithValue(name, value);
                }
            }
        
            await using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                resultList.Add(mapFunction(reader));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"База отвалилась: {ex.Message}");
        }
        return resultList;
    }
  

    // Добавляем метод для команд без возврата данных (INSERT, UPDATE, DELETE)
    private async Task<int> ExecuteNonQueryAsync(string sql, params (string Name, object Value)[]? parameters)
    {
        var connString = Configuration.GetConnectionString("DefaultConnection");
        try
        {
            await using var conn = new NpgsqlConnection(connString);
            await conn.OpenAsync();
            await using var cmd = new NpgsqlCommand(sql, conn);
        
            if (parameters != null)
            {
                foreach (var (name, value) in parameters)
                {
                    cmd.Parameters.AddWithValue(name, value);
                }
            }
        
            return await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка выполнения команды: {ex.Message}");
            return 0;
        }
    }

    // Тащим шмотки из базы
    private async Task<List<ShopProductView>> LoadProductAsync()
    {
        // Запрос, чтоб достать все шмотки, которые можно купить
        string sql = @"
            SELECT shop_items.shop_item_id,
                   shop_items.item_id,
                   products.name,
                   products.image_url,
                   products.description,
                   shop_items.price,
                   shop_items.quantity, shop_items.rarity
            FROM shop_items
            JOIN products ON shop_items.item_id = products.id
            WHERE shop_items.available = true";

        // Используем помощника, чтоб превратить данные в шмотки
        return await ExecuteQueryAsync(sql, reader => new ShopProductView
        {
            ShopItemId = reader.GetInt32(0),
            ItemId = reader.GetInt32(1),
            Name = reader.GetString(2),
            ImageUrl = reader.GetString(3),
            Description = reader.GetString(4),
            Price = reader.GetDecimal(5),
            Quantity = reader.GetInt32(6),
            Rarity = reader.GetString(7)
        });
    }

    // Тащим профили из базы
    private async Task<List<UserProfile>> LoadProfilesAsync()
    {
        // Запрос, чтоб взять все профили
        string sql = @"
            SELECT u.id, u.username, u.email, u.join_date, u.balance, u.role,
                   p.avatar_url, p.level, p.bio
            FROM users u
            JOIN profiles p ON u.id = p.user_id";

        // Используем помощника, чтоб сделать профили
        return await ExecuteQueryAsync(sql, reader => new UserProfile
        {
            Id = reader.GetInt32(0),
            Username = reader.GetString(1),
            Email = reader.GetString(2),
            JoinDate = reader.GetDateTime(3),
            Balance = reader.GetDecimal(4),
            Role = reader.GetString(5),
            AvatarUrl = reader.IsDBNull(6) ? null : reader.GetString(6),
            Level = reader.GetInt32(7),
            Bio = reader.IsDBNull(8) ? null : reader.GetString(8)
        });
    }

    // Решаем, какую фотку показать для профиля
    private string GetAvatarUrl(UserProfile profile)
    {
        // Если фотки нет, берём дефолтную
        if (string.IsNullOrWhiteSpace(profile.AvatarUrl))
        {
            return "/images/default-avatar.jpg";
        }

        // Делаем путь нормальным
        var avatarPath = profile.AvatarUrl.StartsWith("/") ? profile.AvatarUrl : "/" + profile.AvatarUrl;
        var fullPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", avatarPath.TrimStart('/'));
    
        // Если файл есть, показываем его, иначе дефолт
        return File.Exists(fullPath) ? avatarPath : "/images/default-avatar.jpg";
    }

    // Показываем поп-ап с инфой про шмотку
    private void ShowProductDetails(ShopProductView product)
    {
        _selectedProduct = product;
    }

    // Закрываем поп-ап
    private void CloseModal()
    {
        _selectedProduct = null;
    }
    
    
    private enum SortOption
    {
        None,
        PriceAsc,
        PriceDesc,
        NameAsc,
        NameDesc,
        RarityAsc,  // по возрастанию «редкости» (зависит от порядка в enum или маппинга)
        RarityDesc
    }

    private SortOption _currentSort = SortOption.None;
    
    private void ApplySorting()
    {
        _shopProducts = _currentSort switch
        {
            SortOption.PriceAsc  => _shopProducts.OrderBy(p => p.Price).ToList(),
            SortOption.PriceDesc => _shopProducts.OrderByDescending(p => p.Price).ToList(),

            SortOption.NameAsc   => _shopProducts.OrderBy(p => p.Name).ToList(),
            SortOption.NameDesc  => _shopProducts.OrderByDescending(p => p.Name).ToList(),

            // Для редкости нам нужен порядок: Common < Rare < Epic < Legendary
            SortOption.RarityAsc => _shopProducts
                .OrderBy(p => RarityRank(p.Rarity)).ToList(),
            SortOption.RarityDesc => _shopProducts
                .OrderByDescending(p => RarityRank(p.Rarity)).ToList(),

            _ => _shopProducts
        };
    }

// Помощник: присваиваем каждой строке числовой вес
    private int RarityRank(string rarity) => rarity switch
    {
        "Common"    => 0,
        "Uncommon"  => 1,
        "Rare"      => 2,
        "Epic"      => 3,
        "Legendary" => 4,
        _           => 0
    };

    private void OnSortChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<SortOption>(e.Value?.ToString(), out var opt))
        {
            _currentSort = opt;
            ApplySorting();
        }
    }

}